/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.project.bookstore.view;

import com.project.bookstore.controller.BookController;
import com.project.bookstore.model.Book;
import com.project.bookstore.utils.DatabaseConnection;
import com.project.bookstore.model.Transaction;
import com.project.bookstore.controller.TransactionController;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author salvia
 */
public class Homepage extends javax.swing.JFrame {

    private final int userId;
    /**
     * Creates new form LoginFrame
     * @param userIdLogged
     */
    public Homepage(int userIdLogged) {
        this.userId = userIdLogged;
        initComponents();
        RefreshBookProduct();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pane1 = new javax.swing.JButton();
        pane3 = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        TabbedLayout = new javax.swing.JTabbedPane();
        ProductPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookProduct = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        bookIdToBuy = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        bookQtyToBuy = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        buyBookNeeded = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        searchBookField = new javax.swing.JTextField();
        updateBook = new javax.swing.JButton();
        deleteBook = new javax.swing.JButton();
        buyBookNeeded1 = new javax.swing.JButton();
        PaymentPane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        isCredit = new javax.swing.JRadioButton();
        isCash = new javax.swing.JRadioButton();
        cashUsed = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        confirmBuyButton = new javax.swing.JButton();
        totalMoneyUsed = new javax.swing.JLabel();
        jlabelTotal1 = new javax.swing.JLabel();
        changeofCash = new javax.swing.JLabel();
        jlabelTotal2 = new javax.swing.JLabel();
        TransactionPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        deleteTheSelectedRow = new javax.swing.JButton();
        addNewBookPane = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        bookNameAdd = new javax.swing.JTextField();
        bookPriceAdd = new javax.swing.JTextField();
        bookStockAdd = new javax.swing.JTextField();
        addNewBookConfirm = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        buttonGroup1.add(isCredit);
        buttonGroup1.add(isCash);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(683, 384));
        setResizable(false);
        setSize(new java.awt.Dimension(683, 384));

        jPanel1.setBackground(new java.awt.Color(133, 188, 226));

        pane1.setBackground(new java.awt.Color(133, 188, 226));
        pane1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productButton.png"))); // NOI18N
        pane1.setToolTipText("Product");
        pane1.setBorder(null);
        pane1.setBorderPainted(false);
        pane1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pane1ActionPerformed(evt);
            }
        });

        pane3.setBackground(new java.awt.Color(133, 188, 226));
        pane3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transactionButton.png"))); // NOI18N
        pane3.setToolTipText("Transaction");
        pane3.setBorder(null);
        pane3.setBorderPainted(false);
        pane3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pane3ActionPerformed(evt);
            }
        });

        logout.setBackground(new java.awt.Color(255, 102, 102));
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoutButton.png"))); // NOI18N
        logout.setToolTipText("Exit");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pane1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pane3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(pane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(pane3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        TabbedLayout.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        TabbedLayout.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        TabbedLayout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TabbedLayout.setPreferredSize(new java.awt.Dimension(646, 384));

        ProductPane.setBackground(new java.awt.Color(249, 245, 245));

        bookProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bookProduct.setRowHeight(30);
        jScrollPane2.setViewportView(bookProduct);
        if (bookProduct.getColumnModel().getColumnCount() > 0) {
            bookProduct.getColumnModel().getColumn(0).setHeaderValue("Book ID");
            bookProduct.getColumnModel().getColumn(1).setHeaderValue("Book Name");
            bookProduct.getColumnModel().getColumn(2).setHeaderValue("Price");
            bookProduct.getColumnModel().getColumn(3).setHeaderValue("Stock");
        }

        jLabel5.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Available Product to Buy");

        bookIdToBuy.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bookIdToBuy.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bookIdToBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdToBuyActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tw Cen MT", 0, 12)); // NOI18N
        jLabel6.setText("Book ID to Buy");

        bookQtyToBuy.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bookQtyToBuy.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bookQtyToBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookQtyToBuyActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tw Cen MT", 0, 12)); // NOI18N
        jLabel7.setText("Quantity to Buy");

        buyBookNeeded.setBackground(new java.awt.Color(133, 188, 226));
        buyBookNeeded.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buyBookNeeded.setText("BUY");
        buyBookNeeded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBookNeededActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel8.setText("Search (name) :");

        searchBookField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchBookField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchBookField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBookFieldActionPerformed(evt);
            }
        });
        searchBookField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchBookFieldKeyTyped(evt);
            }
        });

        updateBook.setBackground(new java.awt.Color(0, 204, 102));
        updateBook.setText("UPDATE");
        updateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookActionPerformed(evt);
            }
        });

        deleteBook.setBackground(new java.awt.Color(255, 102, 102));
        deleteBook.setText("DELETE");
        deleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookActionPerformed(evt);
            }
        });

        buyBookNeeded1.setBackground(new java.awt.Color(133, 188, 226));
        buyBookNeeded1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buyBookNeeded1.setText("ADD");
        buyBookNeeded1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBookNeeded1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductPaneLayout = new javax.swing.GroupLayout(ProductPane);
        ProductPane.setLayout(ProductPaneLayout);
        ProductPaneLayout.setHorizontalGroup(
            ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProductPaneLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBookField))
                    .addGroup(ProductPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateBook, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(deleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookQtyToBuy)
                            .addComponent(buyBookNeeded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buyBookNeeded1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookIdToBuy))))
                .addGap(27, 27, 27))
        );
        ProductPaneLayout.setVerticalGroup(
            ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBookField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(30, 30, 30)
                .addGroup(ProductPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ProductPaneLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookIdToBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookQtyToBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buyBookNeeded, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBook)
                        .addGap(18, 18, 18)
                        .addComponent(buyBookNeeded1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        TabbedLayout.addTab("", ProductPane);

        PaymentPane.setBackground(new java.awt.Color(249, 245, 245));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payment.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 0, 30)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Payment Method");

        jLabel4.setFont(new java.awt.Font("Tw Cen MT", 2, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Choose your option!");

        isCredit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        isCredit.setText("Credit/Debit Text");
        isCredit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isCreditItemStateChanged(evt);
            }
        });
        isCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isCreditActionPerformed(evt);
            }
        });

        isCash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        isCash.setSelected(true);
        isCash.setText("Cash");
        isCash.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isCashItemStateChanged(evt);
            }
        });
        isCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isCashActionPerformed(evt);
            }
        });

        cashUsed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashUsedActionPerformed(evt);
            }
        });
        cashUsed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashUsedKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cashUsedKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cashUsedKeyTyped(evt);
            }
        });

        jLabel9.setText("Cash Received :");

        confirmBuyButton.setBackground(new java.awt.Color(133, 188, 226));
        confirmBuyButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        confirmBuyButton.setText("CONFIRM BUY");
        confirmBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBuyButtonActionPerformed(evt);
            }
        });

        totalMoneyUsed.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        totalMoneyUsed.setText("cashUsed");

        jlabelTotal1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jlabelTotal1.setText("Total : ");

        changeofCash.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        changeofCash.setText("changeofCash");

        jlabelTotal2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jlabelTotal2.setText("Change :");

        javax.swing.GroupLayout PaymentPaneLayout = new javax.swing.GroupLayout(PaymentPane);
        PaymentPane.setLayout(PaymentPaneLayout);
        PaymentPaneLayout.setHorizontalGroup(
            PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentPaneLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(PaymentPaneLayout.createSequentialGroup()
                            .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PaymentPaneLayout.createSequentialGroup()
                                    .addComponent(jlabelTotal1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(totalMoneyUsed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlabelTotal2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(changeofCash, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PaymentPaneLayout.createSequentialGroup()
                            .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PaymentPaneLayout.createSequentialGroup()
                                    .addComponent(isCash, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(isCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cashUsed, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(confirmBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        PaymentPaneLayout.setVerticalGroup(
            PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaymentPaneLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 121, Short.MAX_VALUE))
            .addGroup(PaymentPaneLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(47, 47, 47)
                .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalMoneyUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabelTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeofCash, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabelTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PaymentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isCash, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedLayout.addTab("", PaymentPane);

        TransactionPane.setBackground(new java.awt.Color(249, 245, 245));

        txTable.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        txTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction ID", "Book Name", "Price", "Quantity", "Total", "Cash Used", "Cash Change", "Date Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(txTable);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 0, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Transaction History");

        deleteTheSelectedRow.setBackground(new java.awt.Color(255, 102, 102));
        deleteTheSelectedRow.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteTheSelectedRow.setText("DELETE selected row(s)");
        deleteTheSelectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTheSelectedRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TransactionPaneLayout = new javax.swing.GroupLayout(TransactionPane);
        TransactionPane.setLayout(TransactionPaneLayout);
        TransactionPaneLayout.setHorizontalGroup(
            TransactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionPaneLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(TransactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TransactionPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteTheSelectedRow, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        TransactionPaneLayout.setVerticalGroup(
            TransactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TransactionPaneLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(TransactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(deleteTheSelectedRow, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        TabbedLayout.addTab("", TransactionPane);

        addNewBookPane.setBackground(new java.awt.Color(249, 245, 245));

        jLabel10.setFont(new java.awt.Font("Tw Cen MT", 0, 30)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Add New Book as a Product");

        addNewBookConfirm.setBackground(new java.awt.Color(133, 188, 226));
        addNewBookConfirm.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addNewBookConfirm.setText("CONFIRM ADD");
        addNewBookConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBookConfirmActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabel11.setText("Book Name");

        jLabel12.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabel12.setText("Book Price");

        jLabel13.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabel13.setText("Stock Available");

        javax.swing.GroupLayout addNewBookPaneLayout = new javax.swing.GroupLayout(addNewBookPane);
        addNewBookPane.setLayout(addNewBookPaneLayout);
        addNewBookPaneLayout.setHorizontalGroup(
            addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewBookPaneLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bookNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addNewBookPaneLayout.createSequentialGroup()
                            .addGroup(addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bookStockAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                    .addComponent(bookPriceAdd, javax.swing.GroupLayout.Alignment.LEADING))
                                .addComponent(jLabel13))
                            .addGap(66, 66, 66)
                            .addComponent(addNewBookConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        addNewBookPaneLayout.setVerticalGroup(
            addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewBookPaneLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookNameAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addNewBookPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addNewBookPaneLayout.createSequentialGroup()
                        .addComponent(bookPriceAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookStockAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addNewBookConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        TabbedLayout.addTab("", addNewBookPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedLayout, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TabbedLayout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_logoutActionPerformed

    private void pane3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pane3ActionPerformed
                                 
        try {
            TransactionController txController = new TransactionController();
            List<Transaction> txList = txController.getAllTx(userId);
            DefaultTableModel model = (DefaultTableModel) txTable.getModel();
            model.setRowCount(0); // clear the table

            for (Transaction tx : txList) {
                Object[] row = {
                    tx.getTxId(),
                    tx.getBookName(),
                    tx.getPrice(),
                    tx.getQuantity(),
                    tx.getTotal(),
                    tx.getCashUsed(),
                    tx.getCashChange(),
                    tx.getDateTime()
                };
                model.addRow(row);
            }

            TabbedLayout.setSelectedIndex(2);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_pane3ActionPerformed

    private void pane1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pane1ActionPerformed
        TabbedLayout.setSelectedIndex(0);
        RefreshBookProduct();
    }//GEN-LAST:event_pane1ActionPerformed

    private void bookIdToBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIdToBuyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIdToBuyActionPerformed

    private void bookQtyToBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookQtyToBuyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookQtyToBuyActionPerformed

    private void buyBookNeededActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBookNeededActionPerformed
        cashUsed.setText("0");
        if (bookIdToBuy.getText().isEmpty() || bookQtyToBuy.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the required fields.");
            return;
        }

        try {
                int ThebookIdToBuy = Integer.parseInt(bookIdToBuy.getText());
                int ThebookQtyToBuy = Integer.parseInt(bookQtyToBuy.getText());

                try {
                    Book book = new BookController(new DatabaseConnection()).getOneBook(ThebookIdToBuy);

                    if (book != null) {

                        String bookName = book.getBookName();
                        int bookPrice = book.getPrice();
                        int bookStock = book.getStock();
                        int totalMoneyHere = bookPrice * ThebookQtyToBuy;

                        System.out.println("Book Name: " + bookName);
                        System.out.println("Book Price: " + bookPrice);
                        System.out.println("Book Stock: " + bookStock);

                        refreshChangeForMoney();
                        System.out.println("Test" );
                        TabbedLayout.setSelectedIndex(1);
                        totalMoneyUsed.setText(Integer.toString(totalMoneyHere));

                        } else {
                            JOptionPane.showMessageDialog(this, "No book found with that ID");
                            return;
                        }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.");
            return;
        }   
        
        
        
    }//GEN-LAST:event_buyBookNeededActionPerformed

    private void searchBookFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBookFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBookFieldActionPerformed

    private void searchBookFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBookFieldKeyTyped
        System.out.println("Key Typed!");
        String searchText = searchBookField.getText();
        BookController bookController = new BookController(new DatabaseConnection());
        List<Book> books = bookController.searchBook(searchText);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Book ID");
        model.addColumn("Book Name");
        model.addColumn("Price");
        model.addColumn("Stock");

        for (Book book : books) {
            model.addRow(new Object[]{book.getBookId(), book.getBookName(), book.getPrice(), book.getStock()});
        }

        bookProduct.setModel(model);
    }//GEN-LAST:event_searchBookFieldKeyTyped

    private void updateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookActionPerformed

            // Get the selected rows in the table
            int[] selectedRows = bookProduct.getSelectedRows();

            if (selectedRows.length <= 0) {
                JOptionPane.showMessageDialog(this, "Warning: You did not select any row to delete!", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get the table model and controller
            DefaultTableModel model = (DefaultTableModel) bookProduct.getModel();
            BookController bookController = new BookController(new DatabaseConnection());

            // Initialize a counter for the number of rows updated
            int rowsUpdated = 0;

            // Iterate over the selected rows
            for (int i : selectedRows) {
                // Get the values from the selected row
                Object v0 = model.getValueAt(i, 0);
                Object v1 = model.getValueAt(i, 1);
                Object v2 = model.getValueAt(i, 2);
                Object v3 = model.getValueAt(i, 3);

                int bookId = Integer.parseInt(v0.toString());
                String bookName = v1.toString();
                int price = Integer.parseInt(v2.toString());
                int stock = Integer.parseInt(v3.toString());

                // Update the database with the new row contents
                bookController.updateBook(bookId, bookName, price, stock);

                // Increment the counter
                rowsUpdated++;
            }

            // Display a message indicating how many rows were updated
            String message = (rowsUpdated == 1) ? "1 row updated" : rowsUpdated + " rows updated";
            JOptionPane.showMessageDialog(this, message);

            // Refresh the table data
            RefreshBookProduct();
        
    }//GEN-LAST:event_updateBookActionPerformed

    private void isCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isCreditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isCreditActionPerformed

    private void isCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isCashActionPerformed

    private void isCashItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isCashItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            System.out.println("Cash!");
            cashUsed.setEnabled(true);
        }
    }//GEN-LAST:event_isCashItemStateChanged

    private void isCreditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isCreditItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            System.out.println("Credit!");
            cashUsed.setText("0");
            refreshChangeForMoney();
            cashUsed.setEnabled(false);
        }
    }//GEN-LAST:event_isCreditItemStateChanged

    private void cashUsedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashUsedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashUsedActionPerformed

    private void confirmBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBuyButtonActionPerformed
        int ThebookIdToBuy = Integer.parseInt(bookIdToBuy.getText());
        int ThebookQtyToBuy = Integer.parseInt(bookQtyToBuy.getText());
        
        try {
            // Assume that "isCreditRadioButton" is the variable that stores the state of the "isCredit" radio button
            boolean isCreditSelected = isCredit.isSelected();

            // Calculate the value for cashUsedHere based on the state of the "isCredit" radio button
            int cashUsedHere = isCreditSelected ? -1 : Integer.parseInt(cashUsed.getText());;
            
            // Call the buyBook method with the calculated value for cashUsedHere
            boolean success = new BookController(new DatabaseConnection()).buyBook(ThebookIdToBuy, ThebookQtyToBuy, userId, cashUsedHere);
            
            if (success) {
                JOptionPane.showMessageDialog(this, "Book purchased successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                RefreshBookProduct();
            } else {
                JOptionPane.showMessageDialog(this, "Buy Failed! Check your Payment Method, Make sure cash is enough, Invalid book ID or insufficient stock.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_confirmBuyButtonActionPerformed

    private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
        int[] selectedRows = bookProduct.getSelectedRows();
        int rowCount = selectedRows.length;

        if (rowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Warning: You did not select any row to delete!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String message = "Are you sure you want to delete " + rowCount + " row(s)?";
        int option = JOptionPane.showConfirmDialog(null, message, "Confirm Delete", JOptionPane.YES_NO_OPTION);
        BookController bookController = new BookController(new DatabaseConnection());
        
        if (option == JOptionPane.YES_OPTION) {
            for (int i = 0; i < selectedRows.length; i++) {
                int selectedId = (int) bookProduct.getValueAt(selectedRows[i], 0);
                System.out.println(selectedId);
                bookController.deleteBook(selectedId);
                RefreshBookProduct();
            }
        }
    }//GEN-LAST:event_deleteBookActionPerformed

    private void buyBookNeeded1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBookNeeded1ActionPerformed
        TabbedLayout.setSelectedIndex(3);
    }//GEN-LAST:event_buyBookNeeded1ActionPerformed

    private void cashUsedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashUsedKeyReleased
        refreshChangeForMoney();
    }//GEN-LAST:event_cashUsedKeyReleased

    private void cashUsedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashUsedKeyTyped
        
    }//GEN-LAST:event_cashUsedKeyTyped

    private void cashUsedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashUsedKeyPressed
    }//GEN-LAST:event_cashUsedKeyPressed

    private void deleteTheSelectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTheSelectedRowActionPerformed
        int[] selectedRows = txTable.getSelectedRows();
        int rowCount = selectedRows.length;

        if (rowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Warning: You did not select any row to delete!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String message = "Are you sure you want to delete " + rowCount + " row(s)?";
        int option = JOptionPane.showConfirmDialog(null, message, "Confirm Delete", JOptionPane.YES_NO_OPTION);
       TransactionController txController = new TransactionController();

        if (option == JOptionPane.YES_OPTION) {
            for (int i = 0; i < selectedRows.length; i++) {
                int selectedId = (int) txTable.getValueAt(selectedRows[i], 0);
                System.out.println(selectedId);
                try {
                    txController.deleteTx(selectedId);
                    pane3.doClick();
                } catch (SQLException ex) {
                    Logger.getLogger(Homepage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_deleteTheSelectedRowActionPerformed

    private void addNewBookConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBookConfirmActionPerformed
            String bookName = bookNameAdd.getText().trim();
            String bookPriceStr = bookPriceAdd.getText().trim();
            String bookStockStr = bookStockAdd.getText().trim();

            if (bookName.isEmpty() || bookPriceStr.isEmpty() || bookStockStr.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Please fill in all fields.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            int bookPrice;
            try {
                bookPrice = Integer.parseInt(bookPriceStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Please enter a valid price.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (bookPrice < 0) {
                JOptionPane.showMessageDialog(this,
                        "Please enter a non-negative price.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            int bookStock;
            try {
                bookStock = Integer.parseInt(bookStockStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Please enter a valid stock count.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (bookStock < 0) {
                JOptionPane.showMessageDialog(this,
                        "Please enter a non-negative stock count.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            BookController bookController = new BookController(new DatabaseConnection());
            bookController.addBook(bookName, bookPrice, bookStock);

            // Clear the text fields after adding the book
            bookNameAdd.setText("");
            bookPriceAdd.setText("");
            bookStockAdd.setText("");
            pane1.doClick();
    }//GEN-LAST:event_addNewBookConfirmActionPerformed

    private void refreshChangeForMoney() {
        String cashUsedText = cashUsed.getText();
        int cashUsed = cashUsedText.isEmpty() ? 0 : Integer.parseInt(cashUsedText);
        if (cashUsed <= 0) {
            changeofCash.setText("0");
            return;
        }
        int totalMoney = Integer.parseInt(totalMoneyUsed.getText());
        int change = cashUsed - totalMoney;
        changeofCash.setText(Integer.toString(change));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Homepage(1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PaymentPane;
    private javax.swing.JPanel ProductPane;
    private javax.swing.JTabbedPane TabbedLayout;
    private javax.swing.JPanel TransactionPane;
    private javax.swing.JButton addNewBookConfirm;
    private javax.swing.JPanel addNewBookPane;
    private javax.swing.JTextField bookIdToBuy;
    private javax.swing.JTextField bookNameAdd;
    private javax.swing.JTextField bookPriceAdd;
    private javax.swing.JTable bookProduct;
    private javax.swing.JTextField bookQtyToBuy;
    private javax.swing.JTextField bookStockAdd;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buyBookNeeded;
    private javax.swing.JButton buyBookNeeded1;
    private javax.swing.JTextField cashUsed;
    private javax.swing.JLabel changeofCash;
    private javax.swing.JButton confirmBuyButton;
    private javax.swing.JButton deleteBook;
    private javax.swing.JButton deleteTheSelectedRow;
    private javax.swing.JRadioButton isCash;
    private javax.swing.JRadioButton isCredit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlabelTotal1;
    private javax.swing.JLabel jlabelTotal2;
    private javax.swing.JButton logout;
    private javax.swing.JButton pane1;
    private javax.swing.JButton pane3;
    private javax.swing.JTextField searchBookField;
    private javax.swing.JLabel totalMoneyUsed;
    private javax.swing.JTable txTable;
    private javax.swing.JButton updateBook;
    // End of variables declaration//GEN-END:variables

    private void RefreshBookProduct() {
        
            
        
            searchBookField.setText("");
            try {
                List<Book> books = new BookController(new DatabaseConnection()).getBooks();
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("Book ID");
                model.addColumn("Book Name");
                model.addColumn("Price");
                model.addColumn("Stock");

                for (Book book : books) {
                    model.addRow(new Object[]{book.getBookId(), book.getBookName(), book.getPrice(), book.getStock()});
                }
                
                bookProduct.setModel(model);
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
    }
    


}
